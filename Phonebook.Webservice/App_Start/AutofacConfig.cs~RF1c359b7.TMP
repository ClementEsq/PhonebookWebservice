using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Reflection;
using System.Text;
using System.Web.Http;
using Autofac;
using Autofac.Integration.WebApi;
using FluentCache.Simple;
using JamaaTech.Smpp.Net.Client;
using Newtonsoft.Json;
using Nowtel.Sms.Domain;
using Nowtel.Sms.Domain.Clx;
using Nowtel.Sms.Domain.Data;
using Nowtel.Sms.Domain.FortyTwo;
using Nowtel.Sms.Domain.Twilio;
using Nowtel.WebServices.Filters;
using PhoneNumbers;
using Nowtel.WebServices.Infrastructure;
using Nowtel.WebServices.Infrastructure.Interfaces;
using Nowtel.WebServices.Infrastructure.Languages;
using Nowtel.WebServices.Models;
using Nowtel.WebServices.Models.Connections;
using Serilog;
using Serilog.Events;
using Serilog.Sinks.RollingFileAlternate;
using TalkHomeMobile.Models.Connections;
using TalkHomeMobile.Infrastructure;

namespace Nowtel.WebServices
{
    public class AutofacConfig
    {
        public static IContainer Configuration(HttpConfiguration config)
        {
            var builder = new ContainerBuilder();
            ConfigureSerilog(builder);
            ConfigureWebApi(builder, config);
            ConfigureSms(builder);
            ConfigureLegacyTalkHomeAppDatabases(builder);
            ConfigureLegacyTalkHomeMobileDatabases(builder);
            ConfigureTalkHomeAppServices(builder);
            ConfigureTalkHomeMobileServices(builder);

            builder.RegisterType<PhoneNumberService>().AsImplementedInterfaces();
            builder.RegisterType<UserAccountService>().AsImplementedInterfaces();
            builder.Register(ctx => PhoneNumberUtil.GetInstance()).SingleInstance();

            var container = builder.Build();

            config.DependencyResolver = new AutofacWebApiDependencyResolver(container);

            return container;
        }

        public static void ConfigureLegacyTalkHomeAppDatabases(ContainerBuilder builder)
        {
            builder.Register(i => new SqlConnection(ConfigurationManager.ConnectionStrings["DigitalkAppsDb"].ConnectionString))
                   .Named<IDbConnection>("DigitalkAppsDb")
                   .InstancePerRequest()
                   .InstancePerLifetimeScope();
            builder.Register(i => new SqlConnection(ConfigurationManager.ConnectionStrings["TalkHomeAppsDb"].ConnectionString))
                   .Named<IDbConnection>("TalkHomeAppsDb")
                   .InstancePerRequest()
                   .InstancePerLifetimeScope();
            builder.Register(i => new SqlConnection(ConfigurationManager.ConnectionStrings["TalkHomeAppsAccountsDb"].ConnectionString))
                   .Named<IDbConnection>("TalkHomeAppsAccountsDb")
                   .InstancePerRequest()
                   .InstancePerLifetimeScope();

            builder.Register(ctx =>
            {
                var client = new HttpClient
                {
                    BaseAddress = new Uri("http://172.20.120.134/")
                };
                client.DefaultRequestHeaders.TryAddWithoutValidation("accept", "application/json");
                client.DefaultRequestHeaders.TryAddWithoutValidation("content-type", "application/json");
                client.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue(
                        "Basic",
                        Convert.ToBase64String(Encoding.ASCII.GetBytes("NowtelAPIUser:trR_911@54FD")));
                return client;
            }).Named<HttpClient>("DigitalkAppsApi")
              .SingleInstance();

            builder.Register(ctx =>
                new DigitalkAppsSettings(
                    ctx.ResolveNamed<IDbConnection>("DigitalkAppsDb"),
                    ctx.ResolveNamed<HttpClient>("DigitalkAppsApi")))
                .AsImplementedInterfaces()
                .InstancePerRequest()
                .InstancePerLifetimeScope();

            builder.Register(ctx => new TalkHomeAppsConnection(ctx.ResolveNamed<IDbConnection>("TalkHomeAppsDb")))
                   .AsImplementedInterfaces()
                   .InstancePerRequest()
                   .InstancePerLifetimeScope();

            builder.Register(ctx => new TalkHomeAppsAccountsConnection(ctx.ResolveNamed<IDbConnection>("TalkHomeAppsAccountsDb")))
                   .AsImplementedInterfaces()
                   .InstancePerRequest()
                   .InstancePerLifetimeScope();
        }

        public static void ConfigureLegacyTalkHomeMobileDatabases(ContainerBuilder builder)
        {
            builder.Register(i => new SqlConnection(ConfigurationManager.ConnectionStrings["TalkHomeMobileDb"].ConnectionString))
                   .Named<IDbConnection>("TalkHomeMobileDb")
                   .InstancePerRequest()
                   .InstancePerLifetimeScope();

            builder.Register(i => new SqlConnection(ConfigurationManager.ConnectionStrings["TalkHomeMobileWebDb"].ConnectionString))
                   .Named<IDbConnection>("TalkHomeMobileWebDb")
                   .InstancePerRequest()
                   .InstancePerLifetimeScope();

            builder.Register(ctx => new TalkHomeMobileWebConnection(ctx.ResolveNamed<IDbConnection>("TalkHomeMobileWebDb")))
                   .AsImplementedInterfaces()
                   .InstancePerRequest()
                   .InstancePerLifetimeScope();
        }

        public static void ConfigureTalkHomeAppServices(ContainerBuilder builder)
        {
            builder.RegisterType<SmsEmailService>().AsImplementedInterfaces();
            builder.RegisterType<UserJourneyService>().AsImplementedInterfaces();
            builder.RegisterType<HtmlService>().AsImplementedInterfaces();
            builder.RegisterType<HackService>().AsImplementedInterfaces();
            builder.RegisterType<ValidationService>().AsImplementedInterfaces();
            builder.RegisterType<ClientConfigService>().AsImplementedInterfaces();
            builder.RegisterType<MiPayService>().AsImplementedInterfaces();
            builder.RegisterType<SoapService>().AsImplementedInterfaces();
            builder.RegisterType<PushNotificationService>().AsImplementedInterfaces();
            builder.RegisterType<FeedbackService>().AsImplementedInterfaces();
            builder.RegisterType<WebsiteService>().AsImplementedInterfaces();
            builder.Register(i => new FluentDictionaryCache()).AsImplementedInterfaces().SingleInstance();
            builder.RegisterType<HelperService>().AsImplementedInterfaces();
            builder.RegisterType<UserAccountService>().AsImplementedInterfaces();
            builder.RegisterType<BundleService>().AsImplementedInterfaces();
            builder.RegisterType<LocalAccessNumberService>().AsImplementedInterfaces();
            builder.RegisterType<OfferEligibilityService>().AsImplementedInterfaces();
            builder.RegisterType<OffersService>().AsImplementedInterfaces();
            builder.RegisterType<RateService>().AsImplementedInterfaces();
            builder.RegisterType<TopupService>().AsImplementedInterfaces();
            builder.RegisterType<HistoryService>().AsImplementedInterfaces();
            builder.RegisterType<AdminService>().AsImplementedInterfaces();
            builder.RegisterType<PaypalService>().AsImplementedInterfaces();
            builder.RegisterType<BalanceService>().AsImplementedInterfaces();
            builder.RegisterType<InviteService>().AsImplementedInterfaces();
            builder.RegisterType<HttpService>().AsImplementedInterfaces();
            builder.RegisterType<FraudService>().AsImplementedInterfaces();
            builder.RegisterType<DestinationService>().AsImplementedInterfaces();
            builder.RegisterType<TransferService>().AsImplementedInterfaces();
            builder.RegisterType<PlatformTesterService>().AsImplementedInterfaces();
            builder.RegisterType<ExchangeRateService>().AsImplementedInterfaces();
            builder.Register(i =>
            {
                var client = new SmppClient();
                var properties = client.Properties;
                properties.SystemID = "N0wT3l!";
                properties.Password = "nOwT3l#1";
                properties.Port = 2875;
                properties.Host = "212.129.59.240";
                properties.SystemType = "";
                properties.DefaultServiceType = "";
                
                client.AutoReconnectDelay = 3000;
                
                client.KeepAliveInterval = 15000;
                
                client.Start();
                return client;
            }).AsSelf().SingleInstance();
            builder.Register(i =>
            {
                var client = new HttpClient
                {
                    BaseAddress = new Uri("https://api-3t.paypal.com/nvp")
                };
                client.DefaultRequestHeaders.TryAddWithoutValidation("accept", "application/x-www-form-urlencoded");
                client.DefaultRequestHeaders.TryAddWithoutValidation("content-type", "application/x-www-form-urlencoded");
                client.DefaultRequestHeaders.TryAddWithoutValidation("User-Agent", "Mozilla/4.0");

                return new PaypalSettings
                {
                    Host = "https://www.paypal.com/cgi-bin",
                    DefaultParameters = new Dictionary<string, string>
                    {
                        {"USER","princie.francis_api1.nowmobile.co.uk"},
                        {"PWD", "46JNNRVWPKC6JV44"},
                        {"SIGNATURE", "A.0Z.XjTsLjx-IqzN5tQq6I7NZ8wAiFxQnSz2JAXJif5K9RNm55RRj9F"},
                        {"VERSION", "93" }
                    },
                    ReturnUrl = "https://api.talkhomeapp.com/topup/paypal/confirm/{0}/{1}/{2}/{3}",
                    CancelUrl = "https://api.talkhomeapp.com/topup/paypal/cancel",
                    Endpoint = client
                };
            }).AsImplementedInterfaces();
            builder.Register(ctx =>
                        new CultureService(
                            JsonConvert.DeserializeObject<Culture[]>(File.ReadAllText("region.json")),
                            ctx.Resolve<ILogger>()))
                   .AsImplementedInterfaces()
                   .SingleInstance();
            builder.RegisterType<EnglishMessageService>().AsImplementedInterfaces();
            builder.RegisterType<DutchMessageService>().AsImplementedInterfaces();
            builder.RegisterType<NorwegianMessageService>().AsImplementedInterfaces();
            builder.RegisterType<GermanMessageService>().AsImplementedInterfaces();
            builder.RegisterType<GreekMessageService>().AsImplementedInterfaces();
            builder.RegisterType<SpanishMessageService>().AsImplementedInterfaces();
            builder.RegisterType<FrenchMessageService>().AsImplementedInterfaces();
            builder.RegisterType<ItalianMessageService>().AsImplementedInterfaces();
            builder.RegisterType<LanguageProvider>().AsImplementedInterfaces().InstancePerRequest().InstancePerLifetimeScope();
        }

        public static void ConfigureTalkHomeMobileServices(ContainerBuilder builder)
        {
            builder.RegisterType<DatabaseService>().AsImplementedInterfaces();
        }

        public static void ConfigureWebApi(ContainerBuilder builder, HttpConfiguration config)
        {
            builder.RegisterApiControllers(Assembly.GetExecutingAssembly());
            builder.RegisterWebApiFilterProvider(config);
            builder.RegisterType<BasicPinAuthenticationFilter>()
                   .AsWebApiActionFilterFor<ApiController>()
                   .InstancePerRequest();
            builder.RegisterType<LanguageFilter>()
                   .AsWebApiActionFilterFor<ApiController>()
                   .InstancePerRequest();
            builder.RegisterType<ExceptionFilter>()
                   .AsWebApiActionFilterFor<ApiController>()
                   .InstancePerRequest();
        }

        public static void ConfigureSms(ContainerBuilder builder)
        {
            builder.RegisterType<SmsDbInitializer>().AsSelf().InstancePerLifetimeScope();
            builder.RegisterType<SmsContext>().AsImplementedInterfaces().InstancePerLifetimeScope();
            builder.RegisterType<FortyTwoService>().As<FortyTwoService>().InstancePerLifetimeScope();
            builder.RegisterType<ClxService>().As<ISmsService>().InstancePerLifetimeScope();
            //builder.RegisterType<ClxService>().Named<ISmsService>("UserSmsService").InstancePerLifetimeScope();
            //builder.RegisterType<ClxService>().Named<ISmsService>("SystemSmsService").InstancePerLifetimeScope();

            builder.Register(ctx => new FortyTwoSettings
            {
                HttpClient = new HttpClient
                {
                    BaseAddress = new Uri("https://rest.fortytwo.com/"),
                    DefaultRequestHeaders =
                    {
                        Authorization =
                            new AuthenticationHeaderValue("Token", ConfigurationManager.AppSettings["FortyTwoToken"])
                    }
                },
                CallbackUrl = "https://api.talkhomeapp.com/fortytwo/report/"
            }).AsImplementedInterfaces().InstancePerLifetimeScope();

            builder.Register(ctx => new ClxSettings
            {
                HttpClient = new HttpClient
                {
                    BaseAddress = new Uri("http://sms1.clxnetworks.net:3800")
                },
                CallbackUrl = "https://api.talkhomeapp.com/clx/report",
                Username = ConfigurationManager.AppSettings["ClxUser"],
                Password = ConfigurationManager.AppSettings["ClxPassword"]
            }).AsImplementedInterfaces().InstancePerLifetimeScope();

            builder.Register(ctx =>
            {
                var client = new HttpClient
                {
                    BaseAddress = new Uri("http://sms1.clxnetworks.net:3800"),
                    DefaultRequestHeaders =
                    {
                        Authorization =
                            new AuthenticationHeaderValue(
                                "Basic",
                                Convert.ToBase64String(Encoding.ASCII.GetBytes(
                                    "ACa9ad69b848cc6fbe0a5104b407c47ed5:5c838ee57952666a944d47c331690e4c")))
                    }
                };
                
                client.DefaultRequestHeaders.TryAddWithoutValidation("accept", "application/json");

                return new TwilioSettings
                {
                    HttpClient = client
                };
            }).AsImplementedInterfaces().InstancePerLifetimeScope();

            builder.Register(context => new ThrWebServices
            {
                Client = new HttpClient
                {
                    BaseAddress = new Uri("https://www.talkhomeapp.com/THRWebServices/"),
                }
            }).AsImplementedInterfaces().InstancePerLifetimeScope();

        }

        public static void ConfigureSerilog(ContainerBuilder builder)
        {
            builder.Register(i => new LoggerConfiguration()
                    .MinimumLevel.Debug()
                    .WriteTo.RollingFileAlternate("..\\logs", LogEventLevel.Warning)
                    .CreateLogger())
                    .As<ILogger>()
                   .SingleInstance();
        }
    }
}
